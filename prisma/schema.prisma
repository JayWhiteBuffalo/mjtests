generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema", "postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DIRECT_URL")
  extensions = [pg_graphql(schema: "graphql"), pg_stat_statements(schema: "extensions"), pgcrypto(schema: "extensions"), pgjwt(schema: "extensions"), pgsodium(schema: "pgsodium"), postgis(schema: "postgis"), supabase_vault, uuid_ossp(map: "uuid-ossp", schema: "extensions")]
  schemas    = ["extensions", "postgis", "private"]
}

model BusinessRequest {
  id          String   @id
  producer    Json?
  referrer    String?
  status      String
  type        String
  user        Json
  vendor      Json?
  archived    Boolean  @default(false)
  createdAt   DateTime @default(now())
  createdById String
  updatedAt   DateTime @updatedAt
  updatedById String
  version     Int      @default(1)
  createdBy   User     @relation("createdBy", fields: [createdById], references: [id])
  updatedBy   User     @relation("updatedBy", fields: [updatedById], references: [id])

  @@schema("private")
}

model ImageRef {
  assetId          String?
  fileSize         Int?
  lastModified     DateTime?
  originalFilename String?
  producerId       String?
  productId        String?
  publicId         String     @id
  size             Int[]
  updatedAt        DateTime   @updatedAt
  uploadedById     String?
  vendorId         String?
  producer         Producer?  @relation("all", fields: [producerId], references: [id])
  product          Product?   @relation("all", fields: [productId], references: [id])
  uploadedBy       User?      @relation(fields: [uploadedById], references: [id])
  vendor           Vendor?    @relation("all", fields: [vendorId], references: [id])
  producerMain     Producer[] @relation("main")
  productMain      Product[]  @relation("main")
  vendorMain       Vendor[]   @relation("main")

  @@schema("private")
}

model Producer {
  contact        Json
  flags          Json
  id             String           @id
  license        Json
  location       Json
  mainImageRefId String?
  name           String
  signupStatus   Json
  slug           String           @unique
  archived       Boolean          @default(false)
  createdAt      DateTime         @default(now())
  createdById    String
  updatedAt      DateTime         @updatedAt
  updatedById    String
  version        Int              @default(1)
  imageRefs      ImageRef[]       @relation("all")
  createdBy      User             @relation("createdBy", fields: [createdById], references: [id])
  mainImageRef   ImageRef?        @relation("main", fields: [mainImageRefId], references: [publicId])
  updatedBy      User             @relation("updatedBy", fields: [updatedById], references: [id])
  products       Product[]
  users          UserOnProducer[]

  @@schema("private")
}

model Product {
  batch           String?
  brand           String?
  concentrateType String?
  cultivar        String?
  flags           Json
  id              String     @id
  isDraft         Boolean
  mainImageRefId  String?
  name            String
  normalizedTerps Json?
  potency         Json
  price           Float?
  pricePerGram    Float?
  priceList       Json?
  producerId      String?
  productType     String?
  rating          Json?
  slug            String?    @unique
  subspecies      String?
  terps           Json?
  vendorId        String?
  weight          Float?
  archived        Boolean    @default(false)
  createdAt       DateTime   @default(now())
  createdById     String
  updatedAt       DateTime   @updatedAt
  updatedById     String
  version         Int        @default(1)
  imageRefs       ImageRef[] @relation("all")
  createdBy       User       @relation("createdBy", fields: [createdById], references: [id])
  mainImageRef    ImageRef?  @relation("main", fields: [mainImageRefId], references: [publicId])
  producer        Producer?  @relation(fields: [producerId], references: [id])
  updatedBy       User       @relation("updatedBy", fields: [updatedById], references: [id])
  vendor          Vendor?    @relation(fields: [vendorId], references: [id])

  @@schema("private")
}

model User {
  id                      String            @id
  name                    String?
  profileImageUrl         String?
  roles                   String[]          @default([])
  createdAt               DateTime          @default(now())
  updatedAt               DateTime          @updatedAt
  email                   String            @unique
  createdBusinessRequests BusinessRequest[] @relation("createdBy")
  updatedBusinessRequests BusinessRequest[] @relation("updatedBy")
  uploadedImageRefs       ImageRef[]
  createdProducers        Producer[]        @relation("createdBy")
  updatedProducers        Producer[]        @relation("updatedBy")
  createdProducts         Product[]         @relation("createdBy")
  updatedProducts         Product[]         @relation("updatedBy")
  producers               UserOnProducer[]
  vendors                 UserOnVendor[]
  createdVendors          Vendor[]          @relation("createdBy")
  updatedVendors          Vendor[]          @relation("updatedBy")

  @@schema("private")
}

model UserOnProducer {
  role       String
  updatedAt  DateTime @updatedAt
  userId     String
  producerId String
  producer   Producer @relation(fields: [producerId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@id([userId, producerId])
  @@schema("private")
}

model UserOnVendor {
  role      String
  updatedAt DateTime @updatedAt
  userId    String
  vendorId  String
  user      User     @relation(fields: [userId], references: [id])
  vendor    Vendor   @relation(fields: [vendorId], references: [id])

  @@id([userId, vendorId])
  @@schema("private")
}

model Vendor {
  contact         Json
  flags           Json
  id              String                   @id
  latLng          Unsupported("postgis.geometry")?
  license         Json
  location        Json
  mainImageRefId  String?
  name            String                   @unique
  operatingStatus String
  rating          Json?
  schedule        Json
  signupStatus    Json
  slug            String                   @unique
  archived        Boolean                  @default(false)
  createdAt       DateTime                 @default(now())
  createdById     String
  updatedAt       DateTime                 @updatedAt
  updatedById     String
  version         Int                      @default(1)
  imageRefs       ImageRef[]               @relation("all")
  products        Product[]
  users           UserOnVendor[]
  createdBy       User                     @relation("createdBy", fields: [createdById], references: [id])
  mainImageRef    ImageRef?                @relation("main", fields: [mainImageRefId], references: [publicId])
  updatedBy       User                     @relation("updatedBy", fields: [updatedById], references: [id])

  @@index([latLng], map: "blockgroup_idx", type: Gist)
  @@schema("private")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model spatial_ref_sys {
  srid      Int     @id
  auth_name String? @db.VarChar(256)
  auth_srid Int?
  srtext    String? @db.VarChar(2048)
  proj4text String? @db.VarChar(2048)

  @@schema("postgis")
}
