
generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
  extensions = [postgis]
}

model Account {
  access_token String? @db.Text
  expires_at Int?
  id String @id @default(cuid())
  id_token String? @db.Text
  provider String
  providerAccountId String
  refresh_token String? @db.Text
  scope String?
  session_state String?
  token_type String?
  type String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@unique([provider, providerAccountId])
}

model BusinessRequest {
  id String @id
  producer Json
  referrer String?
  status String
  type String
  user Json
  vendor Json

  archived Boolean @default(false)
  createdAt DateTime @default(now())
  createdBy User @relation(fields: [createdById], references: [id], name: "createdBy")
  createdById String
  updatedAt DateTime @updatedAt
  updatedBy User @relation(fields: [updatedById], references: [id], name: "updatedBy")
  updatedById String
  version Int @default(1)
}

model ImageRef {
  assetId String?
  fileSize Int?
  lastModified DateTime?
  originalFilename String?
  producer Producer? @relation(fields: [producerId], references: [id], name: "all")
  producerId String?
  producerMain Producer[] @relation("main")
  product Product? @relation(fields: [productId], references: [id], name: "all")
  productId String?
  productMain Product[] @relation("main")
  publicId String @id
  size Int[]
  updatedAt DateTime @updatedAt
  uploadedBy User? @relation(fields: [uploadedById], references: [id])
  uploadedById String?
  vendor Vendor? @relation(fields: [vendorId], references: [id], name: "all")
  vendorId String?
  vendorMain Vendor[] @relation("main")
}

model Producer {
  contact Json
  flags Json
  id String @id
  imageRefs ImageRef[] @relation("all")
  license Json
  location Json
  mainImageRef ImageRef? @relation(fields: [mainImageRefId], references: [publicId], name: "main")
  mainImageRefId String?
  name String
  products Product[]
  signupStatus Json
  slug String @unique
  users UserOnProducer[]

  archived Boolean @default(false)
  createdAt DateTime @default(now())
  createdBy User @relation(fields: [createdById], references: [id], name: "createdBy")
  createdById String
  updatedAt DateTime @updatedAt
  updatedBy User @relation(fields: [updatedById], references: [id], name: "updatedBy")
  updatedById String
  version Int @default(1)
}

model Product {
  brand String?
  concentrateType String?
  cultivar String?
  flags Json
  id String @id
  imageRefs ImageRef[] @relation("all")
  isDraft Boolean
  mainImageRef ImageRef? @relation(fields: [mainImageRefId], references: [publicId], name: "main")
  mainImageRefId String?
  name String
  potency Json
  price Float?
  pricePerGram Float?
  producer Producer? @relation(fields: [producerId], references: [id])
  producerId String?
  productType String?
  rating Json?
  slug String? @unique
  subspecies String?
  terps Json?
  vendor Vendor? @relation(fields: [vendorId], references: [id])
  vendorId String?
  weight Float?

  archived Boolean @default(false)
  createdAt DateTime @default(now())
  createdBy User @relation(fields: [createdById], references: [id], name: "createdBy")
  createdById String
  updatedAt DateTime @updatedAt
  updatedBy User @relation(fields: [updatedById], references: [id], name: "updatedBy")
  updatedById String
  version Int @default(1)
}

model Session {
  id String @id @default(cuid())
  sessionToken String @unique
  userId String
  expires DateTime
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  accounts Account[]
  email String? @unique
  emailVerified DateTime?
  id String @id @default(cuid())
  image String?
  name String?
  producers UserOnProducer[]
  roles String[] @default([])
  sessions Session[]
  vendors UserOnVendor[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBusinessRequests BusinessRequest[] @relation("createdBy")
  createdProducers Producer[] @relation("createdBy")
  createdProducts Product[] @relation("createdBy")
  createdVendors Vendor[] @relation("createdBy")
  updatedBusinessRequests BusinessRequest[] @relation("updatedBy")
  updatedProducers Producer[] @relation("updatedBy")
  updatedProducts Product[] @relation("updatedBy")
  updatedVendors Vendor[] @relation("updatedBy")
  uploadedImageRefs ImageRef[]
}

model UserOnProducer {
  role String
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id])
  userId String
  producer Producer @relation(fields: [producerId], references: [id])
  producerId String

  @@id([userId, producerId])
}

model UserOnVendor {
  role String
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id])
  userId String
  vendor Vendor @relation(fields: [vendorId], references: [id])
  vendorId String

  @@id([userId, vendorId])
}

model Vendor {
  contact Json
  flags Json
  id String @id
  imageRefs ImageRef[] @relation("all")
  latLng Unsupported("geometry(Point, 4326)")?
  license Json
  location Json
  mainImageRef ImageRef? @relation(fields: [mainImageRefId], references: [publicId], name: "main")
  mainImageRefId String?
  name String @unique
  operatingStatus String
  products Product[]
  rating Json?
  schedule Json
  signupStatus Json
  slug String @unique
  users UserOnVendor[]

  archived Boolean @default(false)
  createdAt DateTime @default(now())
  createdBy User @relation(fields: [createdById], references: [id], name: "createdBy")
  createdById String
  updatedAt DateTime @updatedAt
  updatedBy User @relation(fields: [updatedById], references: [id], name: "updatedBy")
  updatedById String
  version Int @default(1)

  @@index([latLng], name: "blockgroup_idx", type: Gist)
}

model VerificationToken {
  identifier String
  token String @unique
  expires DateTime

  @@unique([identifier, token])
}
